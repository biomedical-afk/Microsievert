import streamlit as st import pandas as pd from io import BytesIO from openpyxl import Workbook from openpyxl.styles import Font, Alignment, Border, Side, PatternFill from openpyxl.utils import get_column_letter from openpyxl.drawing.image import Image as XLImage from datetime import datetime import re # --- COLORES DE LA APP --- COLOR_PRIMARIO = "#1c6758" COLOR_SECUNDARIO = "#3d8361" COLOR_FONDO = "#f8f9fa" COLOR_TEXTO = "#222" COLOR_FOOTER = "#6c757d" # --- LOGIN SIMPLE --- USUARIOS = { "Mispanama": "Maxilo2000", # Cambia estos valores a lo que prefieras "usuario1": "password123" } if "autenticado" not in st.session_state: st.session_state["autenticado"] = False if not st.session_state["autenticado"]: st.markdown("<h2 style='text-align:center; color:#1c6758'>Acceso al Sistema de Gestión de Dosimetría</h2>", unsafe_allow_html=True) usuario = st.text_input("Usuario", key="login_user") password = st.text_input("Contraseña", type="password", key="login_pass") if st.button("Ingresar"): if usuario in USUARIOS and password == USUARIOS[usuario]: st.session_state["autenticado"] = True st.rerun() else: st.error("Usuario o contraseña incorrectos.") st.stop() # Detiene aquí si no ha iniciado sesión # --- OPCIÓN CERRAR SESIÓN --- if st.session_state["autenticado"]: if st.sidebar.button("Cerrar sesión"): st.session_state["autenticado"] = False st.rerun() # --- INTERFAZ PRINCIPAL --- st.set_page_config( page_title="Sistema de Gestión de Dosimetría", layout="centered" ) st.markdown(f""" <h1 style="color:{COLOR_PRIMARIO};text-align:center">Sistema de Gestión de Dosimetría</h1> <hr style="border-top: 2px solid {COLOR_SECUNDARIO};"> """, unsafe_allow_html=True) st.write("Sube los archivos necesarios, selecciona el período, pon el nombre del reporte y genera el Excel profesional.") col1, col2 = st.columns(2) with col1: participantes_file = st.file_uploader("Archivo de Participantes (.xlsx, .xls)", type=["xlsx", "xls"], key="participantes") with col2: dosis_file = st.file_uploader("Archivo de Dosis (.xlsx, .xls, .csv)", type=["xlsx", "xls", "csv"], key="dosis") # --- Leer participantes y obtener períodos --- periodo_opciones = [] dfp = None if participantes_file: try: dfp = pd.read_excel(participantes_file) periodos = set() for col in ['PERIODO 1', 'PERIODO 2']: if col in dfp.columns: periodos.update( dfp[col].dropna().astype(str).str.strip().str.upper() ) periodo_opciones = sorted(periodos) except Exception as e: st.error(f"Error leyendo participantes: {e}") periodo_seleccionado = st.selectbox("Selecciona el período a mostrar", options=periodo_opciones) if periodo_opciones else None nombre_reporte = st.text_input( "Nombre del archivo de reporte (sin extensión):", value=f"ReporteDosimetria_{datetime.now().strftime('%Y-%m-%d')}" ) logo_file = st.file_uploader("Sube el logo de Microsievert (.png, opcional)", type=["png"], key="logo") logo_bytes = logo_file.read() if logo_file else None def leer_dosis(f): if f.name.lower().endswith('.csv'): df = pd.read_csv(f, delimiter=';', engine='python') else: df = pd.read_excel(f) df.columns = ( df.columns.str.strip() .str.lower() .str.replace(' ', '', regex=False) .str.replace('(', '') .str.replace(')', '') ) return df.rename(columns={ 'hp10dosecorr.': 'hp10dose', 'hp0.07dosecorr.': 'hp0.07dose', 'hp3dosecorr.': 'hp3dose' }) def generar_reporte(df_final, logo_bytes=None): wb = Workbook() ws = wb.active ws.title = "REPORTE DE DOSIS" border = Border( left=Side(style='thin'), right=Side(style='thin'), top=Side(style='thin'), bottom=Side(style='thin') ) ws['I1'] = f"Fecha de emisión: {datetime.now().strftime('%d/%m/%Y')}" ws['I1'].font = Font(size=10, italic=True) ws['I1'].alignment = Alignment(horizontal='right', vertical='top') ws['A1'] = "" ws['A1'].font = Font(size=10) ws['A1'].alignment = Alignment(horizontal='left', vertical='top') if logo_bytes: try: logo_img = XLImage(BytesIO(logo_bytes)) logo_img.width, logo_img.height = 240, 100 ws.add_image(logo_img, "A1") except Exception as e: pass ws.merge_cells('A5:J5') c = ws['A5'] c.value = 'REPORTE DE DOSIMETRÍA' c.font = Font(bold=True, size=14) c.alignment = Alignment(horizontal='center') headers = [ 'PERIODO DE LECTURA', 'COMPAÑÍA', 'CÓDIGO DE DOSÍMETRO', 'NOMBRE', 'CÉDULA', 'FECHA DE LECTURA', 'TIPO DE DOSÍMETRO', 'Hp(10)', 'Hp(0.07)', 'Hp(3)' ] for i, h in enumerate(headers, 1): cell = ws.cell(row=7, column=i, value=h) cell.font = Font(bold=True) cell.alignment = Alignment(horizontal='center') cell.fill = PatternFill('solid', fgColor='DDDDDD') cell.border = border start_row = 8 for idx, row in df_final.iterrows(): for col_idx, val in enumerate(row, 1): c = ws.cell(row=start_row + idx, column=col_idx, value=val) c.alignment = Alignment(horizontal='center') c.font = Font(size=10) c.border = border for col in ws.columns: max_len = max(len(str(c.value)) if c.value else 0 for c in col) + 2 ws.column_dimensions[get_column_letter(col[0].column)].width = max_len info_start = start_row + len(df_final) + 2 row = info_start ws.merge_cells(f'A{row}:P{row}') c = ws[f'A{row}'] c.value = 'INFORMACIÓN DEL REPORTE DE DOSIMETRÍA' c.font = Font(bold=True) c.alignment = Alignment(horizontal='center') row += 1 bullets = [ '‒ Periodo de lectura: periodo de uso del dosímetro personal.', '‒ Fecha de lectura: fecha en que se realizó la lectura.', '‒ Tipo de dosímetro:' ] for text in bullets: ws.merge_cells(f'A{row}:D{row}') c = ws[f'A{row}'] c.value = text c.font = Font(size=10, bold=True) c.alignment = Alignment(horizontal='left') row += 2 tipos = [ ('CE', 'Cuerpo Entero'), ('A', 'Anillo'), ('B', 'Brazalete'), ('CR', 'Cristalino') ] for clave, desc in tipos: ws.merge_cells(f'C{row}:D{row}') c = ws[f'C{row}'] c.value = f"{clave} = {desc}" c.font = Font(size=10, bold=True) c.alignment = Alignment(horizontal='left') for col in ('C', 'D'): ws.cell(row=row, column=ord(col)-64).border = border row += 1 row += 1 ws.merge_cells(f'F{row}:I{row}') c = ws[f'F{row}'] c.value = 'LÍMITES ANUALES DE EXPOSICIÓN A RADIACIONES' c.font = Font(bold=True, size=10) c.alignment = Alignment(horizontal='center') row += 1 limites = [ ("Cuerpo Entero", "20 mSv/año"), ("Cristalino", "150 mSv/año"), ("Extermidades y piel", "500 mSv/año"), ("Fetal", "1 mSv/periodo de gestación"), ("Público", "1 mSv/año") ] for cat, val in limites: ws.merge_cells(f'F{row}:G{row}') ws[f'F{row}'].value = cat ws[f'F{row}'].font = Font(size=10) ws[f'F{row}'].alignment = Alignment(horizontal='left') ws.merge_cells(f'H{row}:I{row}') ws[f'H{row}'].value = val ws[f'H{row}'].font = Font(size=10) ws[f'H{row}'].alignment = Alignment(horizontal='right') for col in ('F','G','H','I'): ws.cell(row=row, column=ord(col)-64).border = border row += 1 row += 2 ws.merge_cells(f'A{row}:P{row}') c = ws[f'A{row}'] c.value = '‒ DATOS DEL PARTICIPANTE:' c.font = Font(bold=True, size=10) c.alignment = Alignment(horizontal='left') row += 1 datos = [ '‒ Código de usuario: Número único asignado al usuario por Microsievert, S.A.', '‒ Nombre: Persona a la cual se le asigna el dosímetro personal.', '‒ Cédula: Número del documento de identidad personal del usuario.', '‒ Fecha de nacimiento: Registro de la fecha de nacimiento del usuario.' ] for txt in datos: ws.merge_cells(f'A{row}:P{row}') c = ws[f'A{row}'] c.value = txt c.font = Font(size=10) c.alignment = Alignment(horizontal='left') row += 1 row += 2 ws.merge_cells(f'A{row}:P{row}') c = ws[f'A{row}'] c.value = '‒ DOSIS EN MILISIEVERT:' c.font = Font(bold=True, size=10) c.alignment = Alignment(horizontal='left') row += 1 ws.merge_cells(f'B{row}:C{row}') hb = ws[f'B{row}'] hb.value = 'Nombre' hb.font = Font(bold=True, size=10) hb.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True) hb.fill = PatternFill('solid', fgColor='DDDDDD') ws.merge_cells(f'D{row}:I{row}') hd = ws[f'D{row}'] hd.value = 'Definición' hd.font = Font(bold=True, size=10) hd.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True) hd.fill = PatternFill('solid', fgColor='DDDDDD') ws.merge_cells(f'J{row}:J{row}') hu = ws[f'J{row}'] hu.value = 'Unidad' hu.font = Font(bold=True, size=10) hu.alignment = Alignment(horizontal='center', wrap_text=True) hu.fill = PatternFill('solid', fgColor='DDDDDD') for col in ('B','C','D','E','F','G','H','I','J'): ws.cell(row=row, column=ord(col)-64).border = border ws.row_dimensions[row].height = 30 row += 1 definitions = [ ("Dosis efectiva Hp(10)", "Es la dosis equivalente en tejido blando, J·kg⁻¹ o Sv a una profundidad de 10 mm, bajo determinado punto del cuerpo.", "mSv"), ("Dosis superficial Hp(0,07)", "Es la dosis equivalente en tejido blando, J·kg⁻¹ o Sv a una profundidad de 0,07 mm, bajo determinado punto del cuerpo.", "mSv"), ("Dosis cristalino Hp(3)", "Es la dosis equivalente en tejido blando, J·kg⁻¹ o Sv a una profundidad de 3 mm, bajo determinado punto del cuerpo.", "mSv") ] for nom, desc, uni in definitions: ws.merge_cells(f'B{row}:C{row}') c = ws[f'B{row}'] c.value = nom c.font = Font(size=10, bold=True) c.alignment = Alignment(horizontal='left', wrap_text=True) ws.merge_cells(f'D{row}:I{row}') c = ws[f'D{row}'] c.value = desc c.font = Font(size=10) c.alignment = Alignment(horizontal='left', wrap_text=True) ws.merge_cells(f'J{row}:J{row}') c = ws[f'J{row}'] c.value = uni c.font = Font(size=10) c.alignment = Alignment(horizontal='center', wrap_text=True) for col in ('B','C','D','E','F','G','H','I','J'): cell = ws.cell(row=row, column=ord(col)-64) cell.border = border cell.alignment = Alignment(wrap_text=True) ws.row_dimensions[row].height = 30 row += 1 row += 1 ws.merge_cells(f'A{row}:P{row}') c = ws[f'A{row}'] c.value = 'LECTURAS DE ANILLO: las lecturas del dosímetro de anillo son registradas como una dosis equivalente superficial Hp(0,07).' c.font = Font(size=10, bold=True) c.alignment = Alignment(horizontal='left', wrap_text=True) row += 1 ws.merge_cells(f'A{row}:P{row}') c = ws[f'A{row}'] c.value = 'Los resultados de las dosis individuales de radiación son reportados para diferentes periodos de tiempo:' c.font = Font(size=10) c.alignment = Alignment(horizontal='left', wrap_text=True) row += 1 periods = [ ('DOSIS ACTUAL', 'Es el correspondiente de dosis acumulada durante el período de lectura definido.'), ('DOSIS ANUAL', 'Es el correspondiente de dosis acumulada desde el inicio del año hasta la fecha.'), ('DOSIS DE POR VIDA', 'Es el correspondiente de dosis acumulada desde el inicio del servicio dosimétrico hasta la fecha.') ] for clave, texto in periods: ws.merge_cells(f'B{row}:C{row}') c = ws[f'B{row}'] c.value = clave c.font = Font(bold=True, size=10) c.alignment = Alignment(horizontal='center') ws.merge_cells(f'D{row}:P{row}') c = ws[f'D{row}'] c.value = texto c.font = Font(size=10) c.alignment = Alignment(horizontal='left', wrap_text=True) for col in ('B','C') + tuple(chr(x) for x in range(68, 81)): ws.cell(row=row, column=ord(col)-64).border = border row += 1 row += 2 ws.merge_cells(f'A{row}:P{row}') c = ws[f'A{row}'] c.value = ( 'DOSÍMETRO DE CONTROL: incluido en cada paquete entregado para monitorear la exposición a la radiación recibida durante el tránsito y almacenamiento. ' 'Este dosímetro debe ser guardado por el cliente en un área libre de radiación durante el período de uso.' ) c.font = Font(size=10, bold=True) c.alignment = Alignment(horizontal='left', wrap_text=True) row += 2 ws.merge_cells(f'A{row}:P{row}') c = ws[f'A{row}'] c.value = ( 'POR DEBAJO DEL MÍNIMO DETECTADO: es la dosis por debajo de la cantidad mínima reportada para el período de uso y son registradas como "PM".' ) c.font = Font(size=10, bold=True) c.alignment = Alignment(horizontal='left', wrap_text=True) output = BytesIO() wb.save(output) output.seek(0) return output if st.button("✅ Generar Reporte", disabled=not(participantes_file and dosis_file and periodo_seleccionado)): try: if not nombre_reporte.strip(): st.error("El nombre del archivo es obligatorio.") elif re.search(r'[\\/:*?"<>|]', nombre_reporte): st.error("El nombre del archivo contiene caracteres no permitidos.") else: dfp = pd.read_excel(participantes_file) dfd = leer_dosis(dosis_file) dfp['DOSIMETRO 1'] = dfp['DOSIMETRO 1'].astype(str).str.strip().str.upper() dfp['DOSIMETRO 2'] = dfp['DOSIMETRO 2'].astype(str).str.strip().str.upper() dfd['dosimeter'] = dfd['dosimeter'].astype(str).str.strip().str.upper() registros = [] for _, fila in dfp.iterrows(): for cod in [fila.get('DOSIMETRO 1',''), fila.get('DOSIMETRO 2','')]: cod = cod.strip().upper() if not cod or cod == 'NAN': continue if cod in dfd['dosimeter'].values: dosis = dfd[dfd['dosimeter']==cod].iloc[0] nombre_raw = f"{fila.get('NOMBRE','')} {fila.get('APELLIDO','')}".strip() nombre = "CONTROL" if "CONTROL" in nombre_raw.upper() else nombre_raw fecha = pd.to_datetime(dosis.get('timestamp', None), errors='coerce') fecha_str = fecha.strftime('%d/%m/%Y %H:%M') if pd.notna(fecha) else '' registros.append({ 'PERIODO DE LECTURA': periodo_seleccionado, 'COMPAÑÍA': fila.get('COMPAÑÍA',''), 'CÓDIGO DE DOSÍMETRO': cod, 'NOMBRE': nombre, 'CÉDULA': fila.get('CÉDULA',''), 'FECHA DE LECTURA': fecha_str, 'TIPO DE DOSÍMETRO': 'CE', 'Hp(10)': float(dosis.get('hp10dose',0)), 'Hp(0.07)': float(dosis.get('hp0.07dose',0)), 'Hp(3)': float(dosis.get('hp3dose',0)) }) if not registros: st.warning("No se encontraron coincidencias entre participantes y dosis.") else: control = registros[0] base10, base07, base3 = map(float, (control['Hp(10)'], control['Hp(0.07)'], control['Hp(3)'])) for i, r in enumerate(registros): if i == 0: r['Hp(10)'], r['Hp(0.07)'], r['Hp(3)'] = f"{base10:.2f}", f"{base07:.2f}", f"{base3:.2f}" else: for key, base in [('Hp(10)', base10), ('Hp(0.07)', base07), ('Hp(3)', base3)]: diff = r[key] - base r[key] = "PM" if diff < 0.005 else f"{diff:.2f}" df_final = pd.DataFrame(registros) excel_bytes = generar_reporte(df_final, logo_bytes) st.success(f"Reporte generado con {len(df_final)} registros.") st.download_button( label="Descargar Reporte Excel", data=excel_bytes, file_name=f"{nombre_reporte.strip()}.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" ) except Exception as e: st.error(f"Error generando reporte: {e}") st.markdown(f""" <div style="color:{COLOR_FOOTER};text-align:center;font-size:12px;"> Sistema de Gestión de Dosimetría - MicroSievert </div> """, unsafe_allow_html=True)





